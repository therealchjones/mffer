#!/bin/sh

summary() {
	echo "$(basename "$0"): download and extract MFF game data"
}

usage() {
	echo "usage: $(basename "$0") [-v] -o output_directory"
	echo "       $(basename "$0") -h"
}

description() {
	echo "mandatory arguments:"
	echo "	-o output_directory"
	echo '		place mff-device-files-<version>/ directory into output_directory'
	echo "options:"
	echo "	-h	print this summarized help message and quit"
	echo "	-v	print more information; specify twice for debug output"
}

# shbuild replace common.sh
# shellcheck source=./common.sh
if [ -r "$(dirname "$0")"/common.sh ]; then
	. "$(dirname "$0")"/common.sh
fi
# shbuild end replace common.sh

DEBUG=""
VERBOSE=""

while getopts 'hvo:' option; do
	case "$option" in
		h)
			if [ "$#" = "1" ]; then
				summary
				usage
				description
				exit 0
			else
				usage >&2
				exit 1
			fi
			;;
		v)
			if [ "Y" = "$VERBOSE" ]; then
				DEBUG=Y
			fi
			VERBOSE=Y
			;;
		o)
			MFFOUTPUTDIR="$OPTARG"
			;;
		?)
			usage >&2
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))
if [ "$#" != "0" ]; then
	usage >&2
	exit 1
fi

DEBUGOUT=/dev/null
VERBOSEOUT=/dev/null
if [ "$DEBUG" = "Y" ]; then
	set -x
	DEBUGOUT=/dev/stdout
	VERBOSE=Y
fi
if [ "$VERBOSE" = "Y" ]; then
	VERBOSEOUT=/dev/stdout
fi

MFFTEMPDIR="$(mktemp -d)" \
	|| throwfatal 'Unable to create temporary directory. Exiting.'

if [ -d "$MFFTEMPDIR" ]; then
	if [ -n "$(find "$MFFTEMPDIR" ! -path "$MFFTEMPDIR")" ]; then
		throwfatal "Temporary directory '$MFFTEMPDIR' is not empty. Exiting."
	fi
	trap 'rm -rf "$MFFTEMPDIR"; kill -- -$$' EXIT HUP INT QUIT TERM
else
	throwfatal "Unable to create temporary directory. Exiting."
fi

if [ -z "${MFFOUTPUTDIR+1}" ]; then
	echo "Error: Output directory not set" >&2
	usage >&2
	exit 1
fi
if [ -z "$MFFOUTPUTDIR" ]; then
	echo "Error: Output directory name must not be null" >&2
	usage >&2
	exit 1
fi
if ! mkdir -p -- "$MFFOUTPUTDIR" >"$DEBUGOUT" 2>&1; then
	echo "Error: Unable to create output directory '$MFFOUTPUTDIR'" >&2
	usage >&2
	exit 1
fi
MFFOUTPUTDIR="$(getdir "$MFFOUTPUTDIR")"

MFF_ANDROID_SDK_URL_BASE='https://dl.google.com/android/repository/'
if [ x = "${MFF_OS}x" ]; then
	case "$(uname)" in
		Darwin)
			MFF_OS="mac"
			;;
		Linux)
			MFF_OS="linux"
			;;
		Windows* | CYGWIN* | MINGW* | MSYS*)
			MFF_OS="win"
			;;
		*) ;;

	esac
fi
if [ "" = "${MFF_OS}" ]; then
	throwfatal "Unable to determine operating system."
fi
if [ win != "${MFF_OS}" ] && [ mac != "$MFF_OS" ] && [ linux != "$MFF_OS" ]; then
	throwfatal "Operating system '${MFF_OS}' not supported."
fi
MFF_ANDROID_SDK_URL_FILE="commandlinetools-${MFF_OS}-7302050_latest.zip"
MFF_ANDROID_SDK_URL="${MFF_ANDROID_SDK_URL:-$MFF_ANDROID_SDK_URL_BASE$MFF_ANDROID_SDK_URL_FILE}"
echo "Getting Android command-line tools" >"$VERBOSEOUT"
MFF_CURL="$(getexec curl wget)" || throwfatal "Unable to find downloader. 'curl' or 'wget' required."
ANDROID_SDK_ROOT="$MFFTEMPDIR/sdk"
ANDROID_HOME="$ANDROID_SDK_ROOT"
export ANDROID_SDK_ROOT
mkdir -p "$ANDROID_SDK_ROOT" || throwfatal "Unable to create Android command-line tools directory."
MFF_UNZIP="$(getexec unzip)" || throwfatal "Unable to find unzipping program. 'unzip' required."
case "$MFF_CURL" in
	curl)
		MFF_CURLOPTS="-Ss"
		if [ "Y" = "$DEBUG" ]; then MFF_CURLOPTS="-v"; fi
		"${MFF_CURL}" "${MFF_CURLOPTS}" -L -o "$MFFTEMPDIR"/sdk.zip "$MFF_ANDROID_SDK_URL" >"$DEBUGOUT"
		;;
	wget)
		MFF_WGETOPTS="-q"
		if [ "Y" = "$DEBUG" ]; then MFF_WGETOPTS="-v"; fi
		"$MFF_CURL" "$MFF_WGETOPTS" -O "$MFFTEMPDIR"/sdk.zip "$MFF_ANDROID_SDK_URL" >"$DEBUGOUT"
		;;
esac
if [ "Y" != "$DEBUG" ]; then MFF_UNZIP_OPTS="-qq"; fi
"$MFF_UNZIP" $MFF_UNZIP_OPTS "$MFFTEMPDIR/sdk.zip" -d "$MFFTEMPDIR/cmdline-tools-tmp" >"$DEBUGOUT"
mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" \
	&& mv "$MFFTEMPDIR/cmdline-tools-tmp/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/downloaded"

ANDROID_SDKMANAGER="${ANDROID_SDKMANAGER:-$(find "$ANDROID_SDK_ROOT" \( -type f -o -type l \) -name sdkmanager)}"
if [ ! -x "$ANDROID_SDKMANAGER" ]; then
	throwfatal 'Unable to get sdkmanager.'
fi
ANDROID_HOME="$ANDROID_SDK_ROOT"
ANDROID_EMULATOR_HOME="$MFFTEMPDIR"
ANDROID_SDK_HOME="$MFFTEMPDIR"
ANDROID_PREFS_ROOT="$MFFTEMPDIR"
ANDROID_AVD_HOME="$MFFTEMPDIR/avd"
export ANDROID_SDK_ROOT ANDROID_HOME ANDROID_EMULATOR_HOME
export ANDROID_SDK_HOME ANDROID_PREFS_ROOT ANDROID_AVD_HOME
mkdir -p -- "$ANDROID_AVD_HOME" || throwfatal "Unable to creat Android virtual device directory."

echo 'Accepting Android command-line tool licenses' >"$VERBOSEOUT"
i=0
while [ $i -lt 100 ]; do
	echo y
	i=$((i + 1))
done \
	| "$ANDROID_SDKMANAGER" --licenses \
	| sed '/^y$/d' >"$DEBUGOUT"
echo 'Getting updated Android command line tools' >"$VERBOSEOUT"
"$ANDROID_SDKMANAGER" --verbose --install \
	'cmdline-tools;latest' >"$DEBUGOUT"
ANDROID_SDKMANAGER="$(find "$ANDROID_SDK_ROOT/cmdline-tools/latest" \( -type f -o -type l \) -name sdkmanager)"
echo 'Getting Android emulator and platform tools' >"$VERBOSEOUT"
"$ANDROID_SDKMANAGER" --verbose --install \
	'platform-tools' \
	emulator \
	'platforms;android-30' >"$DEBUGOUT"
# We do the system images separately because otherwise they don't
# recognize that emulator (a dependency of theirs) is already
# installed and install a second copy which messes things up.
echo 'Getting Android system images' >"$VERBOSEOUT"
"$ANDROID_SDKMANAGER" --verbose --install \
	'system-images;android-30;google_apis_playstore;x86' \
	'system-images;android-30;google_apis;x86' >"$DEBUGOUT"
ANDROID_AVDMANAGER="$(find "$ANDROID_SDK_ROOT/cmdline-tools/latest" \( -type f -o -type l \) -name avdmanager)"
if [ ! -x "$ANDROID_AVDMANAGER" ]; then
	echo 'Unable to get avdmanager. Exiting.' >&2
	exit 1
fi
ANDROID_EMULATOR="$(find "$ANDROID_SDK_ROOT" \( -type f -o -type l \) -name emulator)"
if [ ! -x "$ANDROID_EMULATOR" ]; then
	echo 'Unable to get Android emulator. Exiting.' >&2
	exit 1
fi
ANDROID_ADB="$(find "$ANDROID_SDK_ROOT" \( -type f -o -type l \) -name adb)"
if [ ! -x "$ANDROID_ADB" ]; then
	echo 'Unable to get adb. Exiting.' >&2
	exit 1
fi
echo 'Creating Android virtual devices' >"$VERBOSEOUT"
"$ANDROID_AVDMANAGER" --verbose create avd \
	--package 'system-images;android-30;google_apis_playstore;x86' \
	--name 'mff_google_play' \
	--device "7in WSVGA (Tablet)" >"$DEBUGOUT"
"$ANDROID_AVDMANAGER" --verbose create avd \
	--package 'system-images;android-30;google_apis;x86' \
	--name 'mff_no_google_play' \
	--device "7in WSVGA (Tablet)" >"$DEBUGOUT"
for name in mff_google_play mff_no_google_play; do
	sed -E -e 's/^hw.keyboard[ =]+.*$/hw.keyboard = yes/' \
		"$ANDROID_AVD_HOME"/"$name".avd/config.ini >"$MFFTEMPDIR/newconfig" \
		&& mv "$MFFTEMPDIR/newconfig" "$ANDROID_AVD_HOME/$name.avd/config.ini"
done
# Really silly workaround for the emulator's "out of date" warning:
MFF_EMULATOR_VERSION="$(
	"$ANDROID_EMULATOR" -version 2>&1 \
		| grep ' emulator version ' \
		| sed -e 's/^.*Android emulator version \([0-9\.]*\) .*$/_version.3D\1/'
)"
MFF_QEMU_VERSION="$(
	"$ANDROID_EMULATOR" -qemu -version 2>&1 \
		| grep 'QEMU emulator version ' \
		| sed -e 's/^.*QEMU emulator version \([0-9\.]*\) .*$/.26coreVersion.3Dqemu2.2520\1/'
)"
MFF_VERSION_KEY="${MFF_EMULATOR_VERSION}${MFF_QEMU_VERSION}"
echo "$MFF_VERSION_KEY = $(date +%s)" >"$ANDROID_EMULATOR_HOME/emu-update-last-check.ini"
echo 'Starting Google Play Android virtual device' >"$VERBOSEOUT"
echo ''
echo '************* USER INTERACTION REQUIRED *************'
echo 'On the emulator, open the Google Play Store app, sign'
echo 'in, and install the latest version of Marvel Future '
echo 'Fight. Leave the emulator running.'
echo '******************************************************'
echo ''
echo 'Press <enter> or <return> when that is complete.'
# -no-audio disables microphone as well, so the system won't prompt for permission
"$ANDROID_EMULATOR" ${DEBUG+-verbose} -avd mff_google_play -no-audio -dns-server 8.8.8.8 >"$DEBUGOUT" 2>&1 &
emulator_pid="$!"
read -r
if ! ps -p "$emulator_pid" >/dev/null; then
	echo "Emulator is no longer running. Unable to continue." >&2
	exit 1
fi
echo 'Getting installation files' >"$VERBOSEOUT"
mkdir "$MFFTEMPDIR/new-apks"

get_avd_serial() {
	if [ -z "$1" ] || [ -n "$2" ]; then
		echo Usage: get_avd_serial avd_name >&2
		exit 1
	fi
	avd_name="$1"
	avd_serial=""
	adb_timeout=30
	adb_times=0
	while [ -z "$avd_serial" ] && [ "$adb_times" -lt "$adb_timeout" ]; do
		# pipelines can execute components within subshells, so may not
		# be able to set variable values that persist after the command.
		# We work around this with command substitution and echo instead.
		avd_serial="$(
			"$ANDROID_ADB" devices \
				| sed -e '/^List of devices/d' \
					-e '/^[[:space:]]*$/d' \
					-e 's/^[[:space:]]*\([^[:space:]]*\)[[:space:]].*$/\1/' \
				| (# inner subshell for pipeline workaround
					while read -r serial; do
						checkname="$("$ANDROID_ADB" -s "$serial" emu avd name \
							| sed -e 's/[[:space:]]*$//' -e '$d')"
						if [ "$checkname" = "$avd_name" ]; then
							if [ -n "$avd_serial" ]; then
								echo "Multiple devices named '$avd_name' found." >&2
								return 1
							fi
							avd_serial="$serial"
						fi
					done
					if [ -n "$avd_serial" ]; then
						echo "$avd_serial"
					fi
				)
		)"
		if [ -z "$avd_serial" ]; then
			sleep 1
			adb_times="$((adb_times + 1))"
		fi
	done
	if [ -z "$avd_serial" ]; then
		echo "Unable to find device named '$avd_name'. Exiting." >&2
		return 1
	fi
	echo "$avd_serial"
}
serial="$(get_avd_serial mff_google_play)" || exit 1
{
	"$ANDROID_ADB" -s "$serial" shell pm path com.netmarble.mherosgb \
		| while read -r pathline; do
			path="$(echo "$pathline" | sed 's/^package:[[:space:]]*//')"
			file="$(basename "$path")"
			"$ANDROID_ADB" pull "$path" "$MFFTEMPDIR/new-apks/$file" >"$DEBUGOUT"
		done
} || {
	echo "Unable to obtain installation files. Exiting." >&2
	exit 1
}
echo 'Stopping Google Play emulator' >"$VERBOSEOUT"
kill "$emulator_pid"
echo 'Starting rootable Android virtual device' >"$VERBOSEOUT"
"$ANDROID_EMULATOR" ${DEBUG+-verbose} -avd mff_no_google_play -delay-adb -no-audio -dns-server 8.8.8.8 >"$DEBUGOUT" 2>&1 &
emulator_pid="$!"
echo 'Connecting to emulator' >"$VERBOSEOUT"
serial="$(get_avd_serial mff_no_google_play)" || exit 1
"$ANDROID_ADB" -s "$serial" wait-for-device
echo 'Installing Marvel Future Fight' >"$VERBOSEOUT"
i=1
until "$ANDROID_ADB" -s "$serial" install-multiple "$MFFTEMPDIR/new-apks/"* >"$DEBUGOUT" 2>&1 || [ $i = 30 ]; do
	sleep 1 && i=$((i + 1))
done
if [ $i = 30 ]; then
	echo "Unable to install. Exiting." >&2
	exit 1
fi
echo ''
echo '************* USER INTERACTION REQUIRED *************'
echo '1. Open Marvel Future Fight.'
echo '2. Press "Cancel" if prompted to install the Google '
echo '   Play Games app'
echo '3. Download updates when prompted.'
echo '4. Interrupt the tutorial by pressing the "Gear" icon '
echo '   and "Settings".'
echo '5. Wait for any automatic downloads shown in progress to'
echo '   complete. Go to the "Option" tab and "Download All'
echo '   Data". Wait for the downloads to finish.'
echo '6. Leave the emulator running and...'
echo '******************************************************'
echo ''
echo 'Press <enter> or <return> when that is complete.'
read -r
if ! ps -p "$emulator_pid" >/dev/null; then
	echo "Emulator is no longer running. Exiting." >&2
	exit 1
fi
echo 'Cataloging virtual device files' >"$VERBOSEOUT"
cat <<'EndOfScript' >"$MFFTEMPDIR/getfiles"
INODE=0
find / -path '*[Nn][Ee][Tt][Mm][Aa][Rr][Bb][Ll][Ee]*' -type f -print0 2>/dev/null \
	| xargs -0 ls -id \
	| sort -n \
	| while read LINE; do
		OLDINODE=$INODE
		INODE="$(echo $LINE \
			| sed -E 's/^[[:space:]]*([0-9]+)[[:space:]].*$/\1/')"
		if [ $INODE = $OLDINODE ]; then
			true
		else
			echo $LINE
		fi
	done \
	| cut -f2 -d' ' \
	| sed 's#^\/##' >/sdcard/Download/allfiles
tar -C / -czf /sdcard/Download/device-files.tar.gz -T /sdcard/Download/allfiles \
	2>/sdcard/Download/device-files-errors.log
grep -v ': No such file or directory$' /sdcard/Download/device-files-errors.log >&2
EndOfScript
"$ANDROID_ADB" -s "$serial" push "$MFFTEMPDIR/getfiles" /sdcard/Download >"$DEBUGOUT"
"$ANDROID_ADB" -s "$serial" shell su root '/bin/sh /sdcard/Download/getfiles' >"$DEBUGOUT"
echo 'Downloading virtual device files' >"$VERBOSEOUT"
"$ANDROID_ADB" -s "$serial" pull /sdcard/Download/device-files.tar.gz "$MFFTEMPDIR" >"$DEBUGOUT" \
	|| {
		echo 'Unable to obtain device files. Exiting.' >&2
		exit 1
	}
kill $emulator_pid
echo 'Extracting virtual device files' >"$VERBOSEOUT"
mkdir -p -- "$MFFTEMPDIR"/release/device-files
cd "$MFFTEMPDIR"/release/device-files && tar xzf "$MFFTEMPDIR/device-files.tar.gz"
if [ ! -d "$MFFOUTPUTDIR" ]; then
	echo "Unable to access output directory '$MFFOUTPUTDIR'. Exiting." >&2
	exit 1
fi

MFFVERSION="$(
	grep -Eo '<string name="PATCH_VERSION">[^<]*</string>' \
		"$MFFTEMPDIR"/release/device-files/data/data/com.netmarble.mherosgb/shared_prefs/com.netmarble.mherosgb.v2.playerprefs.xml \
		| sed -E 's#^.*<string name="PATCH_VERSION">([^<]*)</string>.*$#\1#'
)"
MFFVERSION2="$(
	grep -Eo '<package-info\b[^>]*/>' \
		"$MFFTEMPDIR"/release/device-files/data/system_ce/0/shortcut_service/packages/com.netmarble.mherosgb.xml \
		| sed -E 's#^.*<package-info[^>]*[[:space:]]version="([^"]*)".*$#\1#'
)"
MFFVERSION3="$(date -r "$(
	{
		NEWESTFILE=''
		for file in "$MFFTEMPDIR"/release/device-files/data/media/0/Android/data/com.netmarble.mherosgb/files/bundle/*; do
			if [ -z "$NEWESTFILE" ] || [ ! -r "$NEWESTFILE" ]; then
				NEWESTFILE="$file"
			elif [ "$(date -r "$file" '+%s')" -gt "$(date -r "$NEWESTFILE" '+%s')" ]; then
				NEWESTFILE="$file"
			fi
		done
		echo "$NEWESTFILE"
	}
)" '+%Y%m%d')"
if [ -z "$MFFVERSION" ] || [ -z "$MFFVERSION2" ] || [ -z "$MFFVERSION3" ]; then
	echo "Unable to determine app version." >&2
	echo "MFFVERSION='$MFFVERSION'" >&2
	echo "MFFVERSION2='$MFFVERSION2'" >&2
	echo "MFFVERSION3='$MFFVERSION3'" >&2
	exit 1
fi
VERSIONSTRING="$MFFVERSION-$MFFVERSION2-$MFFVERSION3"

DEVICEFILEDIR="mff-device-files-$VERSIONSTRING"
i=1
# if $DEVICEFILEDIR already ends in -1, add another one to avoid
# removing it in the next step
if [ "x${DEVICEFILEDIR%-$i}" != "x$DEVICEFILEDIR" ]; then
	DEVICEFILEDIR="$DEVICEFILEDIR-$i"
fi
while [ -d "$MFFOUTPUTDIR"/"$DEVICEFILEDIR" ] && [ "$i" -lt 100 ]; do
	DEVICEFILEDIR="${DEVICEFILEDIR%-$i}"
	i=$((i + 1))
	DEVICEFILEDIR="${DEVICEFILEDIR}-$i"
done
if [ "$i" = "100" ]; then
	echo 'Unable to create directory' >&2
	echo "'${DEVICEFILEDIR%-$i}'" >&2
	echo "or any variant appending '-n' for 1 <= n <= 99" >&2
	echo 'because they already exist.' >&2
	echo 'Stopping here so as to avoid deleting' >&2
	echo "'$MFFTEMPDIR/release/device-files'" >&2
	echo 'Press <enter> or <return> to end the program after moving them manually.' >&2
	read -r
	exit 1
fi

mv "$MFFTEMPDIR"/release/device-files "$MFFOUTPUTDIR"/"$DEVICEFILEDIR" || {
	echo "Unable to move device files to output directory " >&2
	echo "'$MFFOUTPUTDIR/device-files'." >&2
	echo 'Stopping here so as to avoid deleting them all.' >&2
	echo 'Press <enter> or <return> to end the script after moving them maually.' >&2
	read -r
	exit 1
}
