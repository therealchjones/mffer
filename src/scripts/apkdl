#!/bin/sh

summary() {
	echo "$(basename "$0"): download MFF program files"
}

usage() {
	echo "usage: $(basename "$0") [-v] -o output_directory"
	echo "       $(basename "$0") -h"
}

description() {
	echo "mandatory arguments:"
	echo "	-o output_directory"
	echo '		place game program files in an mff-apks-<version>/ directory'
	echo '		within output_directory'
	echo "options:"
	echo "	-h	print this summarized help message and quit"
	echo "	-v	print more information; specify twice for debug output"
}

GOOGLE_EMAIL=""
GOOGLE_PASSWORD=""

# Non-POSIX tools used in this script:
# curl, python3 (3.9 or higher), mktemp

# Prints an absolute pathname corresponding to path $1
#
# This is done by changing to the directory $1, so is best done in a
# subshell, as in:
# NEWDIR="$(getdir "../new_dir")"
# (Otherwise, changing back to the previous directory creates its own
# set of problems.) Additionally, this requires the directory to exist, so it
# should be created before calling getdir if necessary.
#
# TODO: #91 Consider whether we need to deal with paths ending in /
# Can probably implement algorithm used by cd, as in:
# https://pubs.opengroup.org/onlinepubs/9699919799/
getdir() {
	if [ "$#" != "1" ]; then
		echo 'Usage: getdir dirname' >&2
		return 1
	fi
	cd -- "$1" || {
		echo "Unable to access directory '$1'" >&2
		return 1
	}
	dirname "$PWD/."
}

getexec() {
	if [ "$#" = 0 ]; then
		echo 'Usage: getexec filename [altfile... ]' >&2
		return 1
	fi
	for filename in "$@"; do
		if type "$filename" >/dev/null 2>&1; then
			echo "$filename"
			return 0
		fi
	done
	return 1
}

throwfatal() {
	if [ "$#" -gt 0 ]; then
		echo "$0": "$@" >&2
	fi
	exit 1
}

cleanup() {
	if [ "$#" -gt "1" ]; then
		echo 'Usage: cleanup [signal]' >&2
		return 1
	fi
	case "$1" in
		"" | HUP | INT | QUIT | TERM) ;;
		*)
			echo "'$1' is an unsupported signal" >&2
			return 1
			;;
	esac
	echo "Cleaning up" >"$VERBOSEOUT"
	# Allow cancelling further if, e.g., someone hits Ctrl-C while cleanup is
	# happening
	trap - EXIT HUP INT QUIT TERM
	wait
	[ -n "$MFFTEMPDIR" ] && {
		rm -rf -- "$MFFTEMPDIR" || echo "Unable to complete cleanup" >&2
	}
	if [ -n "$1" ]; then
		# Shells do not portably exit despite POSIX specification
		# on some of the above signals (e.g., bash ignores SIGQUIT)
		exit 1
	fi
	echo Done >"$VERBOSEOUT"
	exit
}
signal() {
	if [ "$#" != "1" ]; then
		echo 'Usage: signal signalname' >&2
		return 1
	fi
	signal=""
	case "$1" in
		"HUP" | "INT" | "QUIT" | "TERM")
			signal="$1"
			;;
		"EXIT") ;;
		*)
			echo 'Usage: signal signalname' >&2
			return 1
			;;
	esac
	trap '' EXIT
	echo "Processing $1 signal" >"$VERBOSEOUT"
	if [ -n "$signal" ]; then
		cleanup "$signal"
	else
		cleanup
	fi
}
trapforcleanup() {
	trap cleanup EXIT
	trap 'signal HUP' HUP
	trap 'signal INT' INT
	trap 'signal QUIT' QUIT
	trap 'signal TERM' TERM
}

DEBUG="${DEBUG:-}"
VERBOSE="${VERBOSE:-}"
vees=0

while getopts 'hvo:' option; do
	case "$option" in
		h)
			if [ "$#" = "1" ]; then
				summary
				usage
				description
				exit 0
			else
				usage >&2
				exit 1
			fi
			;;
		v)
			vees="$((vees + 1))"
			;;
		o)
			MFFOUTPUTDIR="$OPTARG"
			;;
		?)
			usage >&2
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))
if [ "$#" != "0" ]; then
	usage >&2
	exit 1
fi
if [ -z "${MFFOUTPUTDIR+1}" ]; then
	echo "Error: Output directory not set" >&2
	usage >&2
	exit 1
fi
if [ -z "$MFFOUTPUTDIR" ]; then
	echo "Error: Output directory name must not be null" >&2
	usage >&2
	exit 1
fi
if [ 0 -lt "$vees" ]; then VERBOSE=Y; fi
if [ 1 -lt "$vees" ]; then DEBUG=Y; fi
DEBUGOUT=/dev/null
VERBOSEOUT=/dev/null
if [ -n "$DEBUG" ]; then
	set -x
	DEBUGOUT=/dev/stdout
	VERBOSE=Y
fi
if [ -n "$VERBOSE" ]; then
	VERBOSEOUT=/dev/stdout
fi

echo "Enter a Google account username and password to download MFF."
echo "(You'll need an app password to allow access to this program.)"
while [ -z "$GOOGLE_EMAIL" ]; do
	printf 'Google Email: '
	read -r GOOGLE_EMAIL
done
while [ -z "$GOOGLE_PASSWORD" ]; do
	printf 'Password: '
	# From https://stackoverflow.com/questions/2654009/how-to-make-bash-script-ask-for-a-password/2654048#2654048
	stty_orig=$(stty -g)         # save original terminal setting.
	stty -echo                   # turn-off echoing.
	IFS= read -r GOOGLE_PASSWORD # read the password
	stty "$stty_orig"
	echo ""
done

MFFTEMPDIR="$(mktemp -d)" \
	|| throwfatal 'Unable to create temporary directory. Exiting.'

if [ -d "$MFFTEMPDIR" ]; then
	if [ -n "$(find "$MFFTEMPDIR" ! -path "$MFFTEMPDIR")" ]; then
		throwfatal "Temporary directory '$MFFTEMPDIR' is not empty. Exiting."
	fi
	trapforcleanup
else
	throwfatal "Unable to create temporary directory. Exiting."
fi

if ! mkdir -p -- "$MFFOUTPUTDIR" >"$DEBUGOUT" 2>&1; then
	echo "Error: Unable to create output directory '$MFFOUTPUTDIR'" >&2
	usage >&2
	exit 1
fi
MFFOUTPUTDIR="$(getdir "$MFFOUTPUTDIR")"

echo "Setting up temporary environment" >"$VERBOSEOUT"
# Get the python 3 executable to use. Requires Python 3.9. If not already set in
# the PYTHON3 environment variable, will check to see if python or python3
# satisfies this. If not, will check for the highest 3.x (up to 3.99) such that
# python3.x is in the PATH.
checkPython() {
	if [ -z "$1" ]; then
		echo 'Usage: checkPython <python_command>' >&2
		return 1
	fi
	if type "$1" >"$DEBUGOUT" 2>&1; then
		if minorversion="$("$1" -c 'import sys; print(sys.version_info.minor);')" 2>"$DEBUGOUT" \
			&& [ 9 -le "$minorversion" ]; then
			return 0
		fi
	fi
	return 1
}
if [ -z "${PYTHON3:=}" ]; then
	for file in python python3; do
		if checkPython "$file"; then
			PYTHON3="$file"
			break
		fi
	done
fi
if [ -z "$PYTHON3" ]; then
	ver=99
	while [ 9 -le "$ver" ]; do
		if checkPython python3.$ver; then
			PYTHON3="python3.$ver"
			break
		fi
		ver="$((ver - 1))"
	done
fi
if [ -z "$PYTHON3" ]; then
	echo "Error: unable to locate Python 3.9 or greater" >&2
	exit 1
fi
if ! "$PYTHON3" -m venv "$MFFTEMPDIR/python"; then
	echo "Error: unable to create temporary python environment" >&2
	exit 1
fi
if [ -r "$MFFTEMPDIR/python/bin/activate" ]; then
	# shellcheck disable=SC1091
	. "$MFFTEMPDIR"/python/bin/activate
	if ! python3; then # do *not* use the "$PYTHON3" variable, which points to system python
		echo "Error: Unable to activate temporary python environment" >&2
		exit 1
	fi <<EOF
import sys
if sys.prefix == sys.base_prefix:
    print( "Not in a virtual environment", file=sys.stderr)
    exit(1)
if not sys.prefix.startswith( "$MFFTEMPDIR" ) and not sys.prefix.startswith( "/private$MFFTEMPDIR" ):
    print( "Not running in $MFFTEMPDIR", file=sys.stderr)
    print( "(sys.prefix=" + sys.prefix +")")
    exit(1)
if sys.version_info.major != 3:
    print( "Not running in Python 3", file=sys.stderr)
    exit(1)
if sys.version_info.minor < 9:
    print( "$0 requires Python 3.9 or higher", file=sys.stderr)
    exit(1)
if
import ssl
if ssl.OPENSSL_VERSION_INFO[0:3] != (1,1,1)
    print( f"Warning: Using OpenSSL version '{ssl.OPENSSL_VERSION}'; this may not work.", file=sys.stderr)
if
EOF
else
	echo "Error: Unable to find temporary python environment" >&2
	exit 1
fi
echo "Getting required software" >"$VERBOSEOUT"

# Install the few packages requiring specific versions, then the old gpapi, then
# just copy the python code for the new gpapi into place; this lets everything
# work properly without the need to install protoc to build or upgrade the
# protobuf files.
if ! pip3 install --upgrade 'pip==22.2.2' >"$DEBUGOUT" \
	|| ! pip3 install 'protobuf==3.20.0' >"$DEBUGOUT" \
	|| ! pip3 install 'requests==2.24.0' >"$DEBUGOUT" \
	|| ! pip3 install 'gpapi==0.4.4' >"$DEBUGOUT"; then
	echo 'Unable to install required python packages' >&2
	exit 1
fi
GPAPIDIR="$(find "$MFFTEMPDIR/python" -type d -name "gpapi")"
if [ -z "$GPAPIDIR" ]; then
	echo "Error: Unable to upgrade googleplay-api." >&2
	exit 1
fi
for file in config.py googleplay.py; do
	if ! curl -LSs -o "$GPAPIDIR/$file" \
		https://raw.githubusercontent.com/marty0678/googleplay-api/aa193ea198ac789f2b7d7a6650174078a93710a5/gpapi/"$file" \
		>"$DEBUGOUT"; then
		echo 'Error: Unable to obtain working version of googleplay-api.' >&2
		exit 1
	fi
done

echo "Downloading APKs" >"$VERBOSEOUT"
echo "using:" >"$DEBUGOUT"
python3 --version >"$DEBUGOUT"
pip3 freeze >"$DEBUGOUT"
# Gets a version label formatted like "8.1.0-195390" while downloading the files
if ! VERSION_LABEL="$(
	python3 <<EOF
import os
from gpapi.googleplay import GooglePlayAPI

server=GooglePlayAPI('en_US','America/New York','shamu')
server.login('$GOOGLE_EMAIL','$GOOGLE_PASSWORD')
details = server.details("com.netmarble.mherosgb")
versionString = details["details"]["appDetails"]["versionString"]
versionCode = details["details"]["appDetails"]["versionCode"]
download = server.download("com.netmarble.mherosgb",versionCode)
name = download.get('docId')
os.makedirs("$MFFTEMPDIR",exist_ok=True)
filepath = os.path.join("$MFFTEMPDIR",name + ".apk")
with open( filepath, 'wb') as file:
	for chunk in download.get('file').get('data'):
		file.write(chunk)
for split in download.get('splits'):
	filepath = os.path.join("$MFFTEMPDIR", split.get('name') + ".apk")
	with open (filepath, 'wb') as file:
		for chunk in split.get('file').get('data'):
			file.write(chunk)
print(versionString+'-'+str(versionCode))
EOF
)"; then
	echo "Unable to download MFF" >&2
	exit 1
fi

BASEAPK="$MFFTEMPDIR"/com.netmarble.mherosgb.apk
for file in "$MFFTEMPDIR"/config.*.apk; do
	SPLITAPK="$file"
done
if [ ! -f "$BASEAPK" ] || [ ! -f "$SPLITAPK" ]; then
	echo "MFF download files are invalid" >&2
	exit 1
fi
MFFAPKDIR="$MFFOUTPUTDIR"/mff-apks-"$VERSION_LABEL"
mkdir -p "$MFFAPKDIR"
mv "$BASEAPK" "$MFFAPKDIR"/base.apk
mv "$SPLITAPK" "$MFFAPKDIR"/
