#!/bin/sh

# Prints an absolute pathname corresponding to path $1
#
# This is done by changing to the directory $1, so is best done in a
# subshell, as in:
# NEWDIR="$(getdir "../new_dir")"
# (Otherwise, changing back to the previous directory creates its own
# set of problems.) Additionally, this requires the directory to exist, so it
# should be created before calling getdir if necessary.
#
# TODO: #91 Consider whether we need to deal with paths ending in /
# Can probably implement algorithm used by cd, as in:
# https://pubs.opengroup.org/onlinepubs/9699919799/
getdir() {
	if [ "$#" != "1" ]; then
		echo 'Usage: getdir dirname' >&2
		return 1
	fi
	cd -- "$1" || {
		echo "Unable to access directory '$1'" >&2
		return 1
	}
	dirname "$PWD/."
}

getexec() {
	if [ "$#" = 0 ]; then
		echo 'Usage: getexec filename [altfile... ]' >&2
		return 1
	fi
	for filename in "$@"; do
		if type "$filename" >/dev/null 2>&1; then
			echo "$filename"
			return 0
		fi
	done
	return 1
}

throwfatal() {
	if [ "$#" -gt 0 ]; then
		echo "$0": "$@" >&2
	fi
	exit 1
}

cleanup() {
	if [ "$#" -gt "1" ]; then
		echo 'Usage: cleanup [signal]' >&2
		return 1
	fi
	case "$1" in
		"" | HUP | INT | QUIT | TERM) ;;
		*)
			echo "'$1' is an unsupported signal" >&2
			return 1
			;;
	esac
	echo "Cleaning up" >"$VERBOSEOUT"
	# Temp directories may still be in use by child processes
	trap '' EXIT HUP INT QUIT TERM
	if [ -n "$1" ]; then
		kill -s "$1" 0
	else
		kill 0
	fi
	# Allow cancelling further if, e.g., someone hits Ctrl-C while cleanup is
	# happening
	trap - EXIT HUP INT QUIT TERM
	wait
	[ -n "$MFFTEMPDIR" ] && {
		rm -rf -- "$MFFTEMPDIR" || echo "Unable to complete cleanup" >&2
	}
	if [ -n "$1" ]; then
		kill -s "$1" 0
		# Shells do not portably exit despite POSIX specification
		# on some of the above signals (e.g., bash ignores SIGQUIT)
		exit 1
	fi
	exit
}
signal() {
	if [ "$#" != "1" ]; then
		echo 'Usage: signal signalname' >&2
		return 1
	fi
	signal=""
	case "$1" in
		"HUP" | "INT" | "QUIT" | "TERM")
			signal="$1"
			;;
		"EXIT") ;;
		*)
			echo 'Usage: signal signalname' >&2
			return 1
			;;
	esac
	trap '' EXIT
	echo "Processing $1 signal" >"$VERBOSEOUT"
	if [ -n "$signal" ]; then
		cleanup "$signal"
	else
		cleanup
	fi
}
trapforcleanup() {
	trap cleanup EXIT
	trap 'signal HUP' HUP
	trap 'signal INT' INT
	trap 'signal QUIT' QUIT
	trap 'signal TERM' TERM
}

summary() {
	echo "$(basename "$0"): create and populate ghidra project from game data"
}

usage() {
	echo "usage: $(basename "$0") [-v] -i input_directory -o output_directory"
	echo "       $(basename "$0") -h"
}

description() {
	echo "mandatory arguments:"
	echo " 	-i input_directory"
	echo " 		input directory containing files extracted from a device"
	echo "	-o output_directory"
	echo "		output directory to store analysis files"
	echo "options:"
	echo "	-h	print this summarized help message"
	echo "	-v	print progress information; specify twice for debug output"
}

DEBUG=N
VERBOSE=N

while getopts 'hvo:i:' option; do
	case "$option" in
		h)
			if [ "$#" = "1" ]; then
				summary
				usage
				description
				exit 0
			else
				usage >&2
				exit 1
			fi
			;;
		v)
			if [ "Y" = "$VERBOSE" ]; then
				DEBUG=Y
			fi
			VERBOSE=Y
			;;
		o)
			MFFOUTPUTDIR="$OPTARG"
			;;
		i)
			MFFINPUTDIR="$OPTARG"
			;;
		?)
			usage >&2
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))
if [ "$#" != "0" ]; then
	usage >&2
	exit 1
fi

DEBUGOUT=/dev/null
VERBOSEOUT=/dev/null
if [ "$DEBUG" = "Y" ]; then
	set -x
	DEBUGOUT=/dev/stdout
	VERBOSE=Y
fi
if [ "$VERBOSE" = "Y" ]; then
	VERBOSEOUT=/dev/stdout
fi

if [ "Y" = "$DEBUG" ]; then
	CURLOPTS='-v'
	GITOPTS='-v'
else
	CURLOPTS='-Ss'
	GITOPTS='-q'
fi

if [ -z "$MFFINPUTDIR" ] || [ -z "$MFFOUTPUTDIR" ]; then
	usage >&2
	exit 1
fi

MFFINPUTDIR="$(getdir "$MFFINPUTDIR")" || {
	usage >&2
	exit 1
}
if ! mkdir -p -- "$MFFOUTPUTDIR" >"$VERBOSEOUT" 2>&1; then
	echo "Error: Unable to create output directory '$MFFOUTPUTDIR'" >&2
	usage >&2
	exit 1
fi
MFFOUTPUTDIR="$(getdir "$MFFOUTPUTDIR")" || {
	usage >&2
	exit 1
}

DEVICEFILEDIR="$MFFINPUTDIR"
GHIDRAPROJECTS="$MFFOUTPUTDIR"
VERSIONSTRING="$(basename "$MFFINPUTDIR" | sed -E 's/^[^0-9]*([0-9].*)$/\1/')"
JADXDIR="$MFFOUTPUTDIR/mff-jadx-${VERSIONSTRING}"

GHIDRALOCAL="$(find /usr/local -name 'analyzeHeadless')"
GHIDRA="${GHIDRA:-$GHIDRALOCAL}"
if [ ! -x "$GHIDRA" ]; then
	throwfatal "Unable to find ghidra headless program at '$GHIDRA'. Specify GHIDRA in environment to locate."
fi

IMPORTSCRIPT="$(getdir "$(dirname "$0")")"/ImportC.py

PROJECTNAME="mff-ghidra-$VERSIONSTRING"
LIBIL2CPP="$(find "$DEVICEFILEDIR" -type f -name libil2cpp.so)"
BASEAPK="$(find "$DEVICEFILEDIR" -type f -name base.apk)"
SPLITAPK="$(find "$DEVICEFILEDIR" -type f -name 'split_config*.apk' | head -n 1)"
MFFABI="$(basename "$SPLITAPK")"
MFFABI="${MFFABI%.apk}"
MFFABI="${MFFABI#split_config.}"
GLOBALMETADATA="$(find "$DEVICEFILEDIR" -type f -name global-metadata.dat)"
SOURCEDIR="$(dirname "$LIBIL2CPP")"
DESTDIR="$GHIDRAPROJECTS/$PROJECTNAME"
if [ -d "$DESTDIR" ]; then
	echo "The project directory '$DESTDIR' already exists; will not overwrite." >&2
	echo "Remove $DESTDIR to attempt creating a new analysis project." >&2
	exit 1
fi

cleanup() {
	rm -rf "$MFFTEMPDIR"
}

MFFTEMPDIR="$(mktemp -d)" || {
	echo 'Unable to create temporary directory. Exiting.' >&2
	exit 1
}
trapforcleanup

echo "Downloading Il2CppInspector..." >"$VERBOSEOUT"
I2CIDIR="$MFFTEMPDIR/Il2CppInspector"
HEADERDIR="$I2CIDIR/Il2CppInspector.CLI/cpp/appdata"
BINDIR="$I2CIDIR/Il2CppInspector.CLI/bin/Release/netcoreapp3.1/osx-x64"
SCRIPTDIR="$I2CIDIR/Il2CppInspector.CLI"
cd "$MFFTEMPDIR" || {
	echo 'Unable to enter temporary directory. Exiting.' >&2
	exit 1
}
git clone "$GITOPTS" -c advice.detachedHead=false --recursive -b 2021.1 https://github.com/djkaty/Il2CppInspector >"$DEBUGOUT" || {
	echo 'Unable to obtain Il2CppInspector. Exiting.' >&2
	exit 1
}
cd "$I2CIDIR/Il2CppInspector.CLI" || {
	echo 'Unable to enter Il2CppInspector directory. Exiting.' >&2
	exit 1
}
echo 'Building Il2CppInspector...' >"$VERBOSEOUT"
dotnet publish -r osx-x64 -c Release >"$DEBUGOUT" || {
	echo 'Unable to build Il2CppInspector. Exiting.' >&2
	exit 1
}

echo 'Downloading jadx and decompiling java...' >"$VERBOSEOUT"
curl "$CURLOPTS" -L -o "$MFFTEMPDIR/jadx.zip" "https://github.com/skylot/jadx/releases/download/v1.2.0/jadx-1.2.0.zip" >"$DEBUGOUT" \
	&& mkdir "$MFFTEMPDIR/jadx" \
	&& unzip -d "$MFFTEMPDIR/jadx" "$MFFTEMPDIR/jadx.zip" >"$DEBUGOUT" \
	&& mkdir -p "$JADXDIR/base" "$JADXDIR/$MFFABI" \
	&& "$MFFTEMPDIR/jadx/bin/jadx" -d "$JADXDIR/base" "$BASEAPK" >"$DEBUGOUT" \
	&& "$MFFTEMPDIR/jadx/bin/jadx" -d "$JADXDIR/$MFFABI" "$SPLITAPK" >"$DEBUGOUT"

mkdir -p "$DESTDIR" "$BINDIR/plugins"

echo 'Building ghidra project...' >"$VERBOSEOUT"
"$GHIDRA" "$DESTDIR" "$PROJECTNAME" -import "$SOURCEDIR/"* -noanalysis \
	-loader ElfLoader -loader-imagebase 0 \
	-log "$DESTDIR"/"$PROJECTNAME"-import.log >"$DEBUGOUT" 2>&1

echo 'Building data structures...' >"$VERBOSEOUT"
"$BINDIR"/Il2CppInspector -p il2cpp.py -t Ghidra \
	-i "$LIBIL2CPP" -m "$GLOBALMETADATA" >"$DEBUGOUT"

HEADERFILE="$HEADERDIR/il2cpp-types.h"
sed '/^typedef struct Il2CppString Il2CppString;$/s/$/'"\n"'typedef struct Il2CppStringBuilder Il2CppStringBuilder;/' \
	"$HEADERFILE" >"$HEADERFILE-new" && mv "$HEADERFILE-new" "$HEADERFILE"

cp "$IMPORTSCRIPT" "$SCRIPTDIR"

echo 'Importing data structures...' >"$VERBOSEOUT"
"$GHIDRA" "$DESTDIR" "$PROJECTNAME" -process "libil2cpp.so" -noanalysis \
	-scriptPath "$SCRIPTDIR" \
	-preScript "$(basename "$IMPORTSCRIPT")" "$HEADERFILE" -preScript il2cpp.py \
	-log "$DESTDIR"/"$PROJECTNAME"-il2cpp.log \
	-scriptlog "$DESTDIR"/"$PROJECTNAME"-scripts.log >"$DEBUGOUT" 2>&1

echo 'Analyzing binary...' >"$VERBOSEOUT"
"$GHIDRA" "$DESTDIR" "$PROJECTNAME" -process "libil2cpp.so" \
	-log "$DESTDIR"/"$PROJECTNAME"-analysis.log >"$DEBUGOUT" 2>&1

echo 'Done.' >"$VERBOSEOUT"
