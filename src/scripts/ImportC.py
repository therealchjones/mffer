# Import Il2CppInspector data into current project
#@author chjones@aleph0.com
#@category Data Types

def usage():
	println(
'''Usage: analyzeHeadless <ghidra_project_directory> <ghidra_project_name> \\
    -process libil2cpp.so -noanalysis \\
    -log <ghidra_process_log> -scriptlog <ghidra_script_log> \\
    -scriptPath <script_directory> \\
    -preScript ImportC.py <path_to_il2cpp-types.h> <generated_header_file> <output_success_string>
''')

# This script is used by the `autoanalyze` tool in the mffer project.
# It requires data generated by running Il2CppInspector on a Unity
# IL2CPP-formatted program. More information is available at
# https://github.com/therealchjones/mffer

# When run via analyzeHeadless, uncaught exceptions are printed to stderr, and
# cause this script to exit, but the analyzeHeadless program (including
# importing, analysis, and running other scripts as ordered) continues, and this
# script's uncaught exception does not affect the analyzeHeadless process's exit
# status. To exit this script and the rest of the analyzeHeadless process, use
# `os._exit(exit_status)`. (Note that this will also prevent the analyzeHeadless
# log and scriptlog from being written, and that if this is run in the GUI the
# entire Ghidra process ends.) To determine if this script finished
# successfully, check its output.

from distutils.log import error
import os
import ghidra

# This allows linting of the ghidra builtin functions (such as
# `getScriptArgs()`) when ghidra-stubs is installed, but there isn't a real
# module that can be imported.
# See also https://github.com/VDOO-Connected-Trust/ghidra-pyi-generator
try:
	from ghidra.ghidra_builtins import *
except ImportError:
	pass

from ghidra.app.util.cparser.CPP import PreProcessor, ParseException
from ghidra.app.util.cparser.C import CParser, ParseException as CParserException
from java.io import ByteArrayOutputStream, ByteArrayInputStream, FileOutputStream, PrintStream

errorDefault = "CParserError.log"
headerFile = ""
errorLog = ""

# Exits the script *and* the containing analyzeHeadless/Ghidra session with a
# given exit status, or with a given message and exit status 1
def errorExit( arg=None ):
	intArg = 1
	if arg is None:
		arg = ""
	try:
		intArg = int(arg)
	except:
		try:
			println(str(arg))
		except:
			pass
	finally:
		if isRunningHeadless():
			os._exit(intArg)

args = getScriptArgs()
if args is None or len(args) != 3:
	usage()
	errorExit()
else:
	headerFile = args[0]
	errorLog = args[1]
	successString = args[2]

while str(headerFile) == "":
	if isRunningHeadless():
		errorExit("No header file name provided.")
	else:
		try:
			headerFile = askFile("Select header file", "Choose File")
		except ghidra.util.exception.CancelledException:
			errorExit("Cancelling...")
if not os.access(headerFile,os.F_OK):
	errorExit("Unable to access header file '" + str(headerFile) + "'")
if str(errorLog) == "":
	errorLog = errorDefault

try:
	cpp = PreProcessor()
	cpp.setArgs( [ "-D_GHIDRA_" ] )
	headerStream = ByteArrayOutputStream()
	cpp.setOutputStream( headerStream )
	cpp.parse( str(headerFile) )
except ParseException as e:
	println("Unable to parse Il2CppInspector header file '" + headerFile + "'")
	println("Saving incomplete generated C header file to " + errorLog)
	try:
		fileOut = PrintStream(FileOutputStream(errorLog))
		fileOut.println(headerStream)
	except:
		println("Unable to save generated file.")
	finally:
		println("Last successfully parsed token '" + e.currentToken.image + "'")
		println("ends at line " + str(e.currentToken.endLine) + ", column " + str(e.currentToken.endColumn) )
		fileOut.close()
		headerStream.close()
		errorExit()

dtMgr = currentProgram.getDataTypeManager()
cpp.getDefinitions().populateDefineEquates(dtMgr)

cParser = CParser(dtMgr, True, None)
inputStream = ByteArrayInputStream(headerStream.toByteArray())
try:
	cParser.parse( inputStream )
except CParserException as e:
	println("Unable to create C data types:")
	print(e.getMessage())
	inputStream.close()
	headerStream.close()
	errorExit()

println(successString)
