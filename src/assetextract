#!/usr/bin/env python3

import os
import unitypack
from argparse import ArgumentParser
argumentParser = ArgumentParser()
argumentParser.add_argument("assetbundle", help="asset bundle file to examine")
argumentParser.add_argument(
    "-v", "--verbose", action="count", default=0, help="increase verbosity")
argumentParser.add_argument(
    "-o", "--outdir", help="export assets to directory OUTDIR", required=True)
args = argumentParser.parse_args()

if os.path.exists(args.assetbundle) is False:
    raise FileNotFoundError(args.assetbundle)
outputDirectory = os.path.abspath(args.outdir)
if os.path.exists(outputDirectory) is True:
    print("WARNING: %s already exists. Files may be overwritten." %
          (outputDirectory))
os.makedirs(outputDirectory, exist_ok=True)

with open(args.assetbundle, "rb") as file:
    bundle = unitypack.load(file)
    if args.verbose >= 1:
        print("Extracting assets from %s (%s)" %
              (args.assetbundle, bundle))
    for asset in bundle.assets:
        asset.load()
        if args.verbose >= 3:
            print("%s objects:" % (len(asset.objects)))
        for pathId, objectInfo in asset.objects.items():
            assetData = ""
            assetType = objectInfo.type
            if args.verbose >= 2:
                print("%s: %s " % (pathId, assetType))
            assetContent = objectInfo.read()
            if assetType == "TextAsset":
                assetName = assetContent.name
                assetData = assetContent.script
            elif assetType == "MonoScript":
                assetName = assetContent["m_Name"]
            elif assetType == "AssetBundle":
                assetName = assetContent["m_Name"]
            else:
                assetType = "MonoBehaviour"
                assetName = assetContent["m_Name"]
            assetId = pathId
            if assetId < 0:
                assetId += 18446744073709551615 + 1
            assetFile = ("%s-%s-%s-%s.txt" %
                         (assetName, bundle.name, assetId, assetType))
            if args.verbose >= 3:
                print("-> " + assetFile)
            assetPath = os.path.join(outputDirectory, assetFile)
            with open(assetPath, "w") as newFile:
                newFile.write(assetData)
