#!/bin/sh

# Prints an absolute pathname corresponding to path $1
#
# This is done by changing to the directory $1, so is best done in a
# subshell, as in:
# NEWDIR="$(getdir "../new_dir")"
# (Otherwise, changing back to the previous directory creates its own
# set of problems.) Additionally, this requires the directory to exist, so it
# should be created before calling getdir if necessary.
#
# TODO: #91 Consider whether we need to deal with paths ending in /
# Can probably implement algorithm used by cd, as in:
# https://pubs.opengroup.org/onlinepubs/9699919799/
getdir() {
	if [ "$#" != "1" ]; then
		echo 'Usage: getdir dirname' >&2
		return 1
	fi
	cd -- "$1" || {
		echo "Unable to access directory '$1'" >&2
		return 1
	}
	dirname "$PWD/."
}

getexec() {
	if [ "$#" = 0 ]; then
		echo 'Usage: getexec filename [altfile... ]' >&2
		return 1
	fi
	for filename in "$@"; do
		if type "$filename" >/dev/null 2>&1; then
			echo "$filename"
			return 0
		fi
	done
	return 1
}

throwfatal() {
	if [ "$#" -gt 0 ]; then
		echo "$0": "$@" >&2
	fi
	exit 1
}

cleanup() {
	if [ "$#" -gt "1" ]; then
		echo 'Usage: cleanup [signal]' >&2
		return 1
	fi
	case "$1" in
		"" | HUP | INT | QUIT | TERM) ;;
		*)
			echo "'$1' is an unsupported signal" >&2
			return 1
			;;
	esac
	echo "Cleaning up" >"$VERBOSEOUT"
	# Temp directories may still be in use by child processes
	trap '' EXIT HUP INT QUIT TERM
	if [ -n "$1" ]; then
		kill -s "$1" 0
	else
		kill 0
	fi
	# Allow cancelling further if, e.g., someone hits Ctrl-C while cleanup is
	# happening
	trap - EXIT HUP INT QUIT TERM
	wait
	[ -n "$MFFTEMPDIR" ] && {
		rm -rf -- "$MFFTEMPDIR" || echo "Unable to complete cleanup" >&2
	}
	if [ -n "$1" ]; then
		kill -s "$1" 0
		# Shells do not portably exit despite POSIX specification
		# on some of the above signals (e.g., bash ignores SIGQUIT)
		exit 1
	fi
	exit
}
signal() {
	if [ "$#" != "1" ]; then
		echo 'Usage: signal signalname' >&2
		return 1
	fi
	signal=""
	case "$1" in
		"HUP" | "INT" | "QUIT" | "TERM")
			signal="$1"
			;;
		"EXIT") ;;
		*)
			echo 'Usage: signal signalname' >&2
			return 1
			;;
	esac
	trap '' EXIT
	echo "Processing $1 signal" >"$VERBOSEOUT"
	if [ -n "$signal" ]; then
		cleanup "$signal"
	else
		cleanup
	fi
}
trapforcleanup() {
	trap cleanup EXIT
	trap 'signal HUP' HUP
	trap 'signal INT' INT
	trap 'signal QUIT' QUIT
	trap 'signal TERM' TERM
}

summary() {
	echo "$(basename "$0"): compare two device directory trees"
}

usage() {
	echo "usage: $(basename "$0") [-v] device-files-dir1 device-files-dir2"
	echo "       $(basename "$0") -h"
}

description() {
	echo "mandatory arguments:"
	echo "	device-files-dir1, device-files-dir2"
	echo "		device file directory trees to compare"
	echo "options:"
	echo "	-h	print this summarized help message"
	echo "	-v	increase level of comparison; may be specified multiple times:"
	echo "      without -v: show files only in one directory or the other"
	echo "      -v: show files that differ between directories"
	echo "      -vv: show where files differ between directories"
	echo "legend:"
	echo "  -: the file exists only in device-files-dir1"
	echo "  +: the file exists only in device-files-dir2"
	echo "  Δ: the file differs between the two directories"
}

VERBOSE=0
while getopts 'hv' option; do
	case "$option" in
		h)
			if [ "$#" = "1" ]; then
				summary
				usage
				description
				exit 0
			else
				usage >&2
				exit 1
			fi
			;;
		v)
			if [ -z "$VERBOSE" ]; then
				VERBOSE=0
			fi
			VERBOSE=$((VERBOSE + 1))
			;;
		?)
			usage >&2
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))
if [ "$#" != "2" ]; then
	usage >&2
	exit 1
fi

DFDDIR1="$(getdir "$1")"
DFDDIR2="$(getdir "$2")"

DFDTMPDIR="$(mktemp -d)" || throwfatal "Unable to create temporary directory"

trap 'rm -rf "$DFDTMPDIR"' EXIT HUP INT QUIT TERM

for dir in "$DFDDIR1" "$DFDDIR2"; do
	find "$dir" -type f \
		| sed -e "s#^$dir##" \
			-e 's#^\(/data/app/\)[^/]*\(/com.netmarble.mherosgb-\)[^/]*/#\1*\2*/#' \
			-e '\#^/data/system/graphicsstats/#d' \
			-e '/perfetto_trace.pb/d' \
			-e '/.DS_Store$/d' \
			-e '\#/data/data/com.netmarble.mherosgb/files/nmscrash/#d' \
		| sort >"$DFDTMPDIR/$(basename "$dir")"
done

makediff() {
	file1="$DFDTMPDIR/$(basename "$DFDDIR1")"
	file2="$DFDTMPDIR/$(basename "$DFDDIR2")"
	lines="$1"
	diff -U "$lines" "$file1" "$file2" \
		| sed -e '1,3d' \
			>"$DFDTMPDIR/diff"
	grep '^@' "$DFDTMPDIR/diff" >/dev/null
}
contextlines=999
while makediff "$contextlines"; do
	contextlines=$((contextlines * 2))
done

if [ -z "$VERBOSE" ] || [ "0" = "$VERBOSE" ]; then
	grep '^[-+]' "$DFDTMPDIR/diff"
elif [ "1" -le "$VERBOSE" ]; then
	while read -r fileline; do
		case "$fileline" in
			[-+]*)
				echo "$fileline"
				;;
			*)
				file1="$(find "$DFDDIR1" -path '*'"$fileline")"
				file2="$(find "$DFDDIR2" -path '*'"$fileline")"
				if [ -z "$file1" ] || [ -z "$file2" ]; then
					echo "Error: unable to identify ${fileline} in both directories." >&2
				elif ! cmp -s "$file1" "$file2"; then
					echo 'Δ'"$fileline"
					if [ "2" -le "$VERBOSE" ]; then
						echo "--"
						diff -u "$file1" "$file2"
						echo "--"
					fi
				fi
				;;
		esac
	done <"$DFDTMPDIR/diff"
fi
